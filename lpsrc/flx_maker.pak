@import pyconfig
@import os

@select(tangler('host/config/toolchain.fpc'))
@if pyconfig.MACOSX:
    tangle("toolchain: toolchain_clang_osx")
 elif pyconfig.HAVE_MSVC:
    tangle("toolchain: toolchain_msvc_win32")
 else:
    tangle("toolchain: toolchain_gcc_linux")


@select(tangler('host/lib/plat/config.flx','data'))
//GENERATED during config
class Config {
@def ts(x): tangle(x+",")
@def tv(x): ts("    "+x)
@def b(x): return str(x).lower()

fun config() => 
@tangle("  let ?INSTALL_ROOT_TOPDIR=Filename::join(%r, Filename::join('lib','felix')) in" % (pyconfig.PREFIX))
@tangle("  let ?INSTALL_ROOT=Filename::join(INSTALL_ROOT_TOPDIR, 'felix-%s') in " % (pyconfig.flx_version))
  (
@tv('PREFIX=r"""'+pyconfig.PREFIX+'"""')
@tv("INSTALL_ROOT_TOPDIR=INSTALL_ROOT_TOPDIR")
@tv("INSTALL_ROOT=INSTALL_ROOT")
    FLX_INSTALL_DIR = Env::getenv("FLX_INSTALL_DIR", INSTALL_ROOT),
    FLX_TARGET_SUBDIR = Env::getenv("FLX_TARGET_SUBDIR", "host"),
@tv("HAVE_CYGWIN="+b(pyconfig.CYGWIN))
@tv("HAVE_WIN32="+b(pyconfig.WIN32))
@tv("HAVE_MACOSX="+b(pyconfig.MACOSX))
@tv("HAVE_GNU="+b(pyconfig.HAVE_GNU))
@tangle("    HAVE_MSVC="+b(pyconfig.HAVE_MSVC))
  )
;

typedef config_type = typeof (#config);

fun link_strings(FLX_INSTALL_DIR:string): string * string =
{
@if pyconfig.HAVE_MSVC:
  tangle('  DLINK_STRING:="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+r"\\host\\lib\\rtl ";')
  tangle('  SLINK_STRING:="/link /LIBPATH:"+FLX_INSTALL_DIR+r"\\host\\lib\\rtl ";')
 elif pyconfig.CYGWIN or pyconfig.WIN32:
  tangle('  DLINK_STRING:="-L"+FLX_INSTALL_DIR+"/host/bin "')
  tangle('  SLINK_STRING:="-L"+FLX_INSTALL_DIR+"/host/lib/rtl ";')
 else:
  tangle('  DLINK_STRING:="-L"+FLX_INSTALL_DIR+"/host/lib/rtl ";')
  tangle('  SLINK_STRING:="-L"+FLX_INSTALL_DIR+"/host/lib/rtl ";')
@#
  return DLINK_STRING,SLINK_STRING;
}
}

@select(tangler("host/lib/rtl/flx_rtl_config_params.hpp"))
#ifndef __FLX_RTL_CONFIG_PARAMS_H__
#define __FLX_RTL_CONFIG_PARAMS_H__

@if pyconfig.TARGET_CXX.options.HAVE_VSNPRINTF:
  tangle('#define FLX_HAVE_VSNPRINTF 1')
 else:
  tangle('#define FLX_HAVE_VSNPRINTF 0')

@if pyconfig.TARGET_CXX.options.HAVE_BOOL:
  tangle('#define FLX_HAVE_BOOL 1')
 else:
  tangle('#define FLX_HAVE_BOOL 0')

@if pyconfig.TARGET_CXX.options.HAVE_LONGLONG:
  tangle('#define FLX_HAVE_LONGLONG 1')
 else:
  tangle('#define FLX_HAVE_LONGLONG 0')

@if pyconfig.TARGET_CXX.options.HAVE_LONGDOUBLE:
  tangle('#define FLX_HAVE_LONGDOUBLE 1')
 else:
  tangle('#define FLX_HAVE_LONGDOUBLE 0')

@if pyconfig.HAVE_GNU:
  tangle('#define FLX_HAVE_GNU 1')
 else:
  tangle('#define FLX_HAVE_GNU 0')

@if pyconfig.TARGET_CXX.options.HAVE_GNU_X86:
  tangle('#define FLX_HAVE_GNU_X86 1')
 else:
  tangle('#define FLX_HAVE_GNU_X86 0')

@if pyconfig.TARGET_CXX.options.HAVE_GNU_X86_64:
  tangle('#define FLX_HAVE_GNU_X86_64 1')
 else:
  tangle('#define FLX_HAVE_GNU_X86_64 0')

@if pyconfig.TARGET_CXX.options.HAVE_GNU_BUILTIN_EXPECT:
  tangle("#define FLX_HAVE_GNU_BUILTIN_EXPECT 1")
 else:
  tangle("#define FLX_HAVE_GNU_BUILTIN_EXPECT 0")

@if pyconfig.TARGET_CXX.options.HAVE_CGOTO:
  tangle("#define FLX_HAVE_CGOTO 1")
 else:
  tangle("#define FLX_HAVE_CGOTO 0")

@if pyconfig.TARGET_CXX.options.USE_REGPARM3:
  tangle("#define FLX_USE_REGPARM3 1")
 else:
  tangle("#define FLX_USE_REGPARM3 0")

@if pyconfig.TARGET_CXX.options.HAVE_ASM_LABELS and not pyconfig.MACOSX:
  tangle("#define FLX_HAVE_ASM_LABELS 1")
 else:
  tangle("#define FLX_HAVE_ASM_LABELS 0")

@if pyconfig.TARGET_CXX.options.HAVE_DLOPEN:
  tangle("#define FLX_HAVE_DLOPEN 1")
 else:
  tangle("#define FLX_HAVE_DLOPEN 0")

@if pyconfig.TARGET_CXX.options.MACOSX:
  tangle("#define FLX_MACOSX 1")
 else:
  tangle("#define FLX_MACOSX 0")

@if pyconfig.TARGET_CXX.options.LINUX:
  tangle("#define FLX_LINUX 1")
 else:
  tangle("#define FLX_LINUX 0")

@if pyconfig.TARGET_CXX.options.WIN32:
  tangle("#define FLX_WIN32 1")
 else:
  tangle("#define FLX_WIN32 0")

@if pyconfig.TARGET_CXX.options.WIN64:
  tangle("#define FLX_WIN64 1")
 else:
  tangle("#define FLX_WIN64 0")

@if pyconfig.TARGET_CXX.options.CYGWIN:
  tangle("#define FLX_CYGWIN 1")
 else:
  tangle("#define FLX_CYGWIN 0")

@if pyconfig.TARGET_CXX.options.POSIX:
  tangle("#define FLX_POSIX 1")
 else:
  tangle("#define FLX_POSIX 0")

@if pyconfig.TARGET_CXX.options.SOLARIS:
  tangle("#define FLX_SOLARIS 1")
 else:
  tangle("#define FLX_SOLARIS 0")

@if pyconfig.HAVE_MSVC:
  tangle("#define FLX_HAVE_MSVC 1")
 else:
  tangle("#define FLX_HAVE_MSVC 0")

@if pyconfig.TARGET_CXX.options.HAVE_KQUEUE_DEMUXER:
  tangle("#define FLX_HAVE_KQUEUE_DEMUXER 1")
 else:
  tangle("#define FLX_HAVE_KQUEUE_DEMUXER 0")

@if pyconfig.TARGET_CXX.options.HAVE_POLL:
  tangle("#define FLX_HAVE_POLL 1")
 else:
  tangle("#define FLX_HAVE_POLL 0")

@if pyconfig.TARGET_CXX.options.HAVE_EPOLL:
  tangle("#define FLX_HAVE_EPOLL 1")
 else:
  tangle("#define FLX_HAVE_EPOLL 0")

@if pyconfig.TARGET_CXX.options.HAVE_EVTPORTS:
  tangle("#define FLX_HAVE_EVTPORTS 1")
 else:
  tangle("#define FLX_HAVE_EVTPORTS 0")

@if pyconfig.TARGET_CXX.options.HAVE_SHARED_OPENMP:
  tangle("#define FLX_HAVE_OPENMP 1")
 else:
  tangle("#define FLX_HAVE_OPENMP 0")
@tangle('#define FLX_MAX_ALIGN ' + str(pyconfig.TARGET_CXX.options.MAX_ALIGN))

#endif
@doc()


@h = tangler('host/config/pthread.fpc')
@select(h)
Name: pthread
Description: Pre-emptive threading support
Comment: Generated during configuration

@if pyconfig.TARGET_CXX.options.HAVE_PTHREADS:
   tangle("cflags: "+pyconfig.TARGET_CXX.options.PTHREAD_CFLAGS)
   tangle("requires_dlibs: "+pyconfig.TARGET_CXX.options.PTHREAD_LIBS)
   tangle("requires_slibs: "+pyconfig.TARGET_CXX.options.PTHREAD_LIBS)

@h = tangler('host/config/dl.fpc')
@select(h)
Name: dl
Description: dynamic loading support
Comment: Generated during configuration

@if pyconfig.TARGET_CXX.options.HAVE_DLOPEN:
   tangle("cflags: "+pyconfig.TARGET_CXX.options.DYNAMIC_LOADING_CFLAGS)
   tangle("requires_dlibs: "+pyconfig.TARGET_CXX.options.DYNAMIC_LOADING_LIBS)
   tangle("requires_slibs: "+pyconfig.TARGET_CXX.options.DYNAMIC_LOADING_LIBS)

@if pyconfig.TARGET_CXX.options.HAVE_DLOPEN:
   tangle('includes: <dlfcn.h>')

@h = tangler('host/config/demux.fpc')
@select(h)
Name: demux
Description: Event handling
Comment: Generated during configuration

@if pyconfig.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:demux_dynamic")
   tangle("requires_dlibs: /DEFAULTLIB:ws2_32 /DEFAULTLIB:mswsock")
   tangle("provides_slib: /DEFAULTLIB:demux_static")
   tangle("requires_slibs: /DEFAULTLIB:ws2_32 /DEFAULTLIB:mswsock")
 elif pyconfig.WIN32:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("requires_dlibs: -lws2_32 -lmswsock")
   tangle("provides_slib: -ldemux_static")
   tangle("requires_slibs: -lws2_32 -lmswsock")
 elif pyconfig.SOLARIS:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("provides_slib: -ldemux_static -lsocket -lnsl")
 else:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("provides_slib: -ldemux_static")

Requires: flx_pthread
flx_requires_driver: flx_arun
includes: '"flx_demux.hpp"'
library: demux
headers: (.*/)?([^/\\]+\.hpp)>${2}
srcdir: src/demux
src: [^/\\]+\.cpp
@if pyconfig.TARGET_CXX.options.WIN32:
   tangle("src: win/.*\\.cpp")
 elif pyconfig.TARGET_CXX.options.SOLARIS:
   tangle("src: evtport/.*\\.cpp")
 elif pyconfig.TARGET_CXX.options.LINUX:
   tangle("src: epoll/.*\\.cpp")
 elif pyconfig.TARGET_CXX.options.MACOSX:
   tangle("src: kqueue/.*\\.cpp")
 if pyconfig.TARGET_CXX.options.POSIX:
   tangle("src: posix/.*\\.cpp")





@select(tangler('host/lib/rtl/demux_sockety_config.hpp'))
#ifndef __DEMUX_SOCKETY_CONFIG_H__
#define __DEMUX_SOCKETY_CONFIG_H__
#include <sys/socket.h>
// GENERATED DURING CONFIGURATION

@tangle('typedef %s FLX_SOCKLEN_T;' % pyconfig.TARGET_CXX.options.FLX_SOCKLEN_T)
#endif

@fc = {'float':'f', 'double':'','ldouble':'l'}

@def gen_nan(t):
  if pyconfig.TARGET_CXX.options.HAVE_CXX_ISNAN_IN_CMATH:
    tangle('  fun isnan: '+t+' -> bool = "::std::isnan($1)" is postfix requires Cxx_headers::cmath;')
  elif pyconfig.TARGET_CXX.options.HAVE_C99_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_IEEEFP:
    tangle('  fun isnan: '+t+' -> bool = "isnanf'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>";')
  else:
    tangle('  fun isnan: '+t+' -> bool = "!($1==$1)" is unary;')

  if pyconfig.TARGET_CXX.options.HAVE_CXX_ISINF_IN_CMATH:
    tangle('  fun isinf: '+t+' -> bool = "::std::isinf($1)" is postfix requires Cxx_headers::cmath;')
  elif pyconfig.TARGET_CXX.options.HAVE_C99_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_ISINF_IN_IEEEFP:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>";')
  else:
    tangle('  fun isinf: '+t+' -> bool = "($1==$1 && $1+$1+1.0==$1)" is unary;')

  if pyconfig.TARGET_CXX.options.HAVE_CXX_ISFINITE_IN_CMATH:
    tangle('  fun isfinite: '+t+' -> bool = "::std::isfinite($1)" is postfix requires Cxx_headers::cmath;')
  elif pyconfig.TARGET_CXX.options.HAVE_C99_ISFINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "isfinite($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_FINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif pyconfig.TARGET_CXX.options.HAVE_BSD_FINITE_IN_IEEEFP:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>"')
  else:
    tangle('  fun isfinite: '+t+' -> bool = "($1==$1 && $1!==0.0 && $1+$1!=$1)" is unary;')



@h=tangler('host/lib/plat/flx.flxh','data')
@select(h)

@plats = ["WIN32","POSIX","LINUX","MACOSX","CYGWIN","SOLARIS","BSD"]

@for i in plats:
  if getattr(pyconfig, i):
    tangle("macro val PLAT_" + i + " = true;")
  else:
    tangle("macro val PLAT_" + i + " = false;")

@floats = ["float", "double", "ldouble"]

@complex = ["fcomplex","dcomplex","lcomplex"]
@tmap  = {"float":"float", "double":"double", "ldouble":"long double"}
  
@select(tangler('host/lib/plat/float.flx','data'))
// GENERATED DURING CONFIGURATION
@for t in floats:
  tangle("open class " + t.capitalize())
  tangle("{")
  tangle('  ctor '+t+': string = "static_cast<'+tmap[t]+'>(::std::atof($1.data()))" requires Cxx_headers::cstdlib;')
  tangle('  ctor[T in reals] '+t+': T = "static_cast<'+tmap[t]+'>($1)";')
  gen_nan(t)
  tangle("}")
  tangle("")

@h = tangler("share/lib/std/version.flx")
@select(h)
// GENERATED DURING BUILD (for version number)
publish "System Interface"
class Version
{
@tangle('  const felix_version : string = \'::std::string("'+pyconfig.flx_version+'")\';')
}


@h=tangler('src/compiler/flx_version_hook/flx_version_hook.ml')
@select(h)
@import time
@now = time.time()
@gmtime = time.gmtime(now)
@short_time = time.strftime("%a %d %b %Y",gmtime)
open Flx_version
let version_data: version_data_t =
{
@tangle('  version_string = "%s";' % pyconfig.flx_version)
@tangle('  build_time_float = %s;' % now)
@tangle('  build_time = "%s";' % time.ctime(now))
@f = open ("VERSION","w")
@f.write(pyconfig.flx_version+"\n")
@f.close()
}
;;
let set_version () =
  Flx_version.version_data := version_data
;;
