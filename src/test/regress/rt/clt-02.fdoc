@title compact linear type stuff
@felix
var x :int ^ 3 * int ^ 2= ((1,2,3),(4,5));
println$ x. (`1:2) . (`1:3);
println$ x. 1 . 1;

var y = x :>> int ^ (3 \+ 2);
var topsel : 2 -> (3 \+ 2) = case 1 of (3 \+ 2);
var sel : 3 \+ 2 = topsel (`1:2);
var aprj : int ^ (3 \+ 2) -> int = aproj  sel  of int ^ (3 \+ 2);
println$ y . sel . _strr;
println$ y . aprj . _strr;
println$ y . _strr;
@expect
5
5
5
5
(1,2,3,4,5)
@
