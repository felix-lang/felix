@title lazy recogniser
@felix
include "std/strings/recognisers";
include "std/strings/parsers";
open Recognisers;
open Parsers;
open BaseChips;

// silly sample grammar, right associative operators +, * ^ parens () and 
// value 9 only
fun strng (s:string) => (`Terminal (s, match_string s)) :>> prod_t;
fun nt (s:string) => (`Nonterminal s):>> prod_t;
fun seq (ps: list[prod_t]) => (`Seq ps) :>> prod_t;
fun alt (ps: list[prod_t]) => (`Alt ps) :>> prod_t;
val eps = (#`Epsilon) :>> prod_t;

var xprod = alt([
  seq ([nt "term", strng "+", nt "expr"]),
  nt "term"]);
   
var tprod =alt ([
  seq ([nt "factor", strng "*", nt "term"]),
  nt "factor"]);

var fprod = alt ([seq ([ nt "atom", strng "^", nt "factor"]),
  nt "atom"]);

var atom = alt ([
  seq ([strng "(", nt "expr", strng ")"]),
  strng "9"]);


// library
var xlib = ([
  ("expr",xprod),
  ("term",tprod),
  ("factor",fprod),
  ("atom",atom)
]);

println$ "Xlib=" + xlib.str;

var clx = Grammars[recog_t]::closure ("expr",xlib);
println$ "Closure="  + clx.str;


var parsr = recogniser("expr",xlib);
println$ "Got parser";

var test = "9+9*9^(9+9)";
var b = Buffer test;
var ri,wi = mk_ioschannel_pair[Buffer]();
var ro,wo = mk_ioschannel_pair[Buffer]();
spawn_fthread (parsr (inp=ri, out=wo));
write (wi,b);
spawn_fthread { 
  while true do
    var result = read ro;
    println$ "Test1: End pos (should be 11)=" + result.str;
  done
};
@expect
Xlib=list(expr ::= [(term "+" expr) | term], term ::= [(factor "*" term) | factor], factor ::= [(atom "^" factor) | atom], atom ::= [("(" expr ")") | "9"])
Closure=list('atom', 'factor', 'term', 'expr')
Got parser
Test1: End pos (should be 11)=@1
Test1: End pos (should be 11)=@3
Test1: End pos (should be 11)=@5
Test1: End pos (should be 11)=@11
@
