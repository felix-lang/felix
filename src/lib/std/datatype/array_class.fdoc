
@h1 Array Abstactions.
We specify two core array abstractions: arrays as values
and arrays as objects.
@h2 Array Value.
The ArrayValue class construes an array as a value, that is,
a purely functional, immutable data structure characterised
by two properties: its length, and a way to fetch a 
value from the array using a integral index.

Many routines can be written using only these two functions.
@felix
//$ Array as Value (immutable).
class ArrayValue[t,v]
{
@h3 Core methods.
@h4 Array length {len}.
The length of the array.
@felix
  //$ Length.
  virtual fun len: t -> size;

@h4 Get element by index {unsafe_get}.
Performance routine to fetch the n'th element
of an array without any bounds checking.
@felix
  //$ Unchecked common indexing.
  virtual fun unsafe_get: t * size -> v;
@h4 Get element by index with bound check: {get}.
@felix
  //$ Checked common indexing.
  fun get[I in ints] (x:t, i:I) = { 
    assert i.size < x.len;
    return unsafe_get (x,i.size);
  }
@h3 Derived methods.
The following methods depend only on the implementation
of the core methods. Most are either simple remaps
to provide more convenient nottion, or we use
virtual function so that the default definitions
can be replaced by a more efficient implemention
for some particular types.
@h4 Projection function wrapper.
We use the special lookup rules for provided by
the {apply} function so that an application of
an integer to an array is translated into a 
call on the get method:
@pre
  n a -> get (a,n)
  a. n -> n a -> get (a,n)
@
Note that the more usual reverse application using
operator dot {.} is also made available this way.
@felix

  //$  Checked common indexing.
  fun apply [I in ints] (i:I, x:t) => get (x,i.size);

@h4 Callback based value iterator {iter}.
@felix
  //$ Callback based value iterator.
  virtual proc iter (_f:v->void) (x:t) {
    val n = x.len;
    if n > 0uz do
      for var i:size in 0uz upto n - 1uz do
        _f$ unsafe_get(x,i);
      done
    done
  }

@h4 Callback based index and value iterator {iiter}.
@felix
  //$ Callback based index and value iterator.
  //$ Callback f index value.
  virtual proc iiter (_f:size -> v->void) (x:t) {
    val n = x.len;
    if n > 0uz do
      for var i:size in 0uz upto n - 1uz do
        _f i  (x,i).unsafe_get;
      done
    done
  }

@h4 Streaming iterator {iterator}.
Class {Streamable} provides a set of functions based
on a generated named {iterator} which returns an
infinite stream of option values. Loops based on such
streams work with any Streamable} data type, including 
{ArrayValue}.

Such loops operate by providing the loop body with the
argument of the {Some} constructor of the option type
obtained by a call to a closure of the {iterator} generator.
When that object finally returns {None} to signal the end
of data, the loop terminates.
@felix
  instance Streamable[t,v] {
    //$ Stream  value iterator.
    gen iterator(xs:t) () : opt[v] = 
    {
      if xs.len > 0uz do
        for var j in 0uz upto xs.len - 1uz do
          yield Some (xs,j).unsafe_get;
        done
      done
      return None[v];
    } 
  }

  inherit Streamable[t,v];
@h4 Callback based left fold {fold_left}.
This HOF folds the values in an array into an accumulator
using the supplied function. The scan is left to right.
@felix
  //$ Traditional left fold.
  virtual fun fold_left[u] (_f:u->v->u) (init:u) (x:t): u = {
    var o = init;
    val n = x.len;
    if n > 0uz do
      for var i:size in 0uz upto n - 1uz do
        o = _f o (unsafe_get(x,i));
      done
    done
    return o;
  }

@h4 Callback based right fold {fold_right}.
This HOF folds the values in an array into an accumulator
using the supplied function. The scan is right to left.
@felix
//$ Traditional right fold.
  virtual fun fold_right[u] (_f:v->u->u) (x:t) (init:u): u = {
    var o = init;
    val n = x.len;
    if n > 0uz do
      for var i:size in n - 1uz downto 0uz do
        o = _f (unsafe_get(x,i)) o;
      done
    done
    return o;
  }

@h4 Callback base fold {fold}
This HOF folds array array into an accumulator
using an associative user supplied function.
Associative here means that the order in which
the fold is done does not matter. This constraint
is currently not checked. The default order is a left
fold but the function is virtual and may be replaced
by another more efficient ordering in an overriding function.
@felix
  virtual fun fold[u] (_f:u->v->u) (init:u) (x:t): u => 
    fold_left _f init x
  ;
@h4 Value search by predicate {mem}.
This function searches an array for a value that satifies
the given predicate and returns a boolean value
indicating whether one exists.
@felix
  //$ Membership by predicate.
  virtual fun mem(pred:v->bool) (x:t): bool = {
    val n = x.len;
    if n > 0uz do
      for var i:size in 0uz upto n  - 1uz do
        if pred(unsafe_get(x,i)) do
          return true;
        done
      done
    done
    return false;
  }

@h4 Value search by relation to given value {mem}.
This function searches an array for a value {i} that stands
in the specified relation {rel} to a given value {v},
where the relation is applied in that order: {rel(i,v)}.
The usual relation to use is equality.
@felix
  //$ Membership by relation to given value. 
  virtual fun mem[u] (rel:v*u->bool) (x:t) (e:u): bool =>
    mem (fun (i:v) => rel(i, e)) x
  ;

@h4 Value search by default equality {in}.
This function uses the default equality operator {Eq[v]::==} for
the array value type t to perform a search.
@felix
  //$ Array as Set:
  //$ Membership by equality of value type.
  instance[with Eq[v]] Set[t,v] {
    fun \in (elt:v, a:t) => mem eq of (v * v) a elt;
  }
  inherit[t,v with Eq[v]] Set[t,v];


@h4 Value find and return using predicate {find}
Same as our {mem} function except it returns the located value
as an option type.
@felix
  //$ Searching for value satisfying predicate.
  virtual fun find(pred:v->bool) (x:t): opt[v] = {
    val n = x.len;
    if  n > 0uz do 
      for var i:size in 0uz upto n - 1uz do
        if pred(unsafe_get(x,i)) do
          return Some$ unsafe_get(x,i);
        done
      done
    done
    return None[v];
  }

@h4 Value find and return using relation {find}
Same as our {mem} function except it returns the located value
as an option type.
@felix 
  //$ Searching for value satisfying relation to given value.
  virtual fun find (rel:v*v->bool) (x:t) (e:v): opt[v] = {
    val n = x.len;
    if n > 0uz do
      for var i:size in 0uz upto n - 1uz do
        if rel(unsafe_get (x,i), e) do
          return Some$ unsafe_get (x,i);
        done
      done
    done

    return None[v];
  }

@h4 Missing.
Should have a functional update? Find methods should have
directions. Search method should really be instances of
a class derived from Set. Find functions should have a
version that also returns the index.
@felix
}

@h2 True Arrays.
This is an attempt to represent arrays in a more precise setting.
Ordinary arrays just use integer indexes. But a true array uses
a precise type as the index, an it must provide a value for all
possible values of the index. As such, bounds checks are not
required.

This work is incomplete.
@felix

class TrueArrayValue [t,x,v] 
{
   inherit ArrayValue[t,v];
   virtual fun render : x -> size;
   fun true_unsafe_get (a:t, i:x) => unsafe_get (a, render i);
}

@h2 Array Object.
The ArrayObject class extends the capabilities of an ArrayValue
by allowing mutation. A mutable array is typically abstract and
represented by a pointer, so it also uses pass by reference.

@felix
//$ Array as Object (mutable).
class ArrayObject[t,v]
{
  inherit ArrayValue[t,v];

@h3 Storing a value with {unsafe_set}.
Modify an array object at a given index position
by assigning a new value without a bounds check.
@felix
  // Unsafe store value into array by common index.
  virtual proc unsafe_set: t * size * v;

@h3 Fatching a pointer to an element with {unsafe_get_ref}.
Note this is problematic as it forces a value to
addressabe be stored as an object. A bitarray
will not satisfy this requirement. Do we need
another abstraction?
@felix
  virtual fun unsafe_get_ref : t * size -> &v;

@h3 Storing a value with {set}.
Modify an array object by assigning a new value
to the slot at a given index position. Bounds checked.
@felix
  // Checked store value into array by common index.
  proc set[I in ints] (x:t, i:I, a:v) { 
    assert i.size < x.len; unsafe_set (x,i.size,a); 
  } 

@h3 Getting a pointer to an array element.
@felix
  fun n"&." [I in ints] (x:t, i:I) : &v = {
    assert i.size < x.len; 
    return unsafe_get_ref (x,i.size); 
  }
}

@h2 True Array Object.
Incomplete work for arrays in a more precise setting
where the index type is fixed.
@felix
class TrueArrayObject[t,x, v]
{
  inherit TrueArrayValue[t,x,v];
  inherit ArrayObject[t,v];
  proc true_unsafe_set(a:t, i:x, e:v) => unsafe_set (a, render i, e);
}

@h2 Contiguous Arrays.
A contiguous array is one for which the store is
certain to be contiguous and admits scanning
the array directly using a pointer.

Two methods, {stl_begin} and {stl_end} provide
pointers to the first element and one past the
location of the last element, for traditional
STL like array operations. These pointers have type
{+v} where {v} is the element type. The named
type {carray[v]} is an alias for {+v}. 
@felix
//$ Array as Contiguous STL Object.
//$ Provides STL iterators type +v
class ContiguousArrayObject[t,v]
{
  inherit ArrayObject[t,v];

@h3 The {stl_begin</code> and <code>stl_end} methods.
@felix
  //$ Start of array iterator.
  virtual fun stl_begin: t -> +v;

  //$ One past the end of array iterator.
  virtual fun stl_end: t -> +v;

@h3 A pointer to an element by index {+}.
We allow adding an integer to an array object to yield
an incrementable pointer to that element. 
@felix
  //$ Add integer to iterator.
  fun + [I in ints] (pa:t, i:I) : carray [v] = { 
     assert i.size < pa.len; 
     return pa.stl_begin + i.size; 
  }

@h3 Sort method using supplied comparator {sort}.
In place sort the contents of a contiuous array using STL
sort and a supplied comparator, which must be a
total order.
@felix
  //$ In place sort using STL sort with Felix comparator.
  proc sort (cmp: v * v -> bool) (a:t) {
    var first = a.stl_begin;
    var last = a.stl_end;
    var z = Sort::stl_comparator (cmp);
    Sort::stl_sort (z,first,last);
  }

@h3 Sort method using default comparator {sort}.
Inplace sort using default comparator.
@felix
  //$ In place sort using STL sort with default comparison.
  proc sort[with Tord[v]] (a:t) => sort (< of (v*v)) a;

}

@h2 True Contiguous Array Object.
A contiguous array in a more precise setting.
Incomplete.
@felix
class TrueContiguousArrayObject[t,x, v] 
{
  inherit TrueArrayObject [t,x,v];
  inherit ContiguousArrayObject[t,v];
  fun + (pa:t, i:x) : carray [v] => pa + render i;
}

