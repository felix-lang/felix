@h1 Platforms
The Felix system is based on a 4 stage cross-compilation concept.
We define four distinct entities called platforms. A platform is
an abstraction of salient details relating to an actual computer
system. These details relate to the computers CPU type (e.g. i386, x86_64), 
operating mode (32 bit, 64 bit), operating system (Linux, Solaris, Windows,
OSX, BSD, Posix, Cygwin), compiler tools (gcc, MSVC), and file system
layout.

Felix needs data describing platforms at distinct stages of the build
and use process.

@h2 Build Platform
This is a description of the box on which the build process runs.
It is usually the client's computer, but if the client is running
a package manager and fetches an already built system, then this
is the description of the computer used to build that system.

For example, for Debian it is the autobuilder computer than
constructs the Debian package.

@h2 Host Platform
This is a description of the box on which the client edits
Felix programs and translates them to C++.


@h2 Target Platform
This is a description of the box on which the generated C++
is compiled. 

@h2 Run Platform
This is a description of the box on which the machine binaries
generated by the target based C++ compiler will run. Testing of code
must be performed on this platform,  or one like it.

For example, this machine may be an iPhone.

@h2 Build Process
The build platform requires three distinct C++ compilers.

It requires a native C++ compiler to build tools like
flx_pkgconfig which are required during the build process.

It requires a cross-compiler targetting the host platform
to build the command line tool flx and flx_pkgconfig.

It requires a cross-compiler targetting the target platform
to build the run time libraries.

The build platform also requires an Ocaml compiler targetting
the host platform. If a native code cross compiler is not available 
the bytecode generating tools must be used.

The host platform does not require a C++ compiler. It runs
flx_pkgconfig (built on the build platform) and the command
line harness flx (built on the build platform). Thus, the
host platform has no dependencies.

The target platform requires a C++ compiler to compile 
and link code for the run platform. Any static libraries
are required on this platform. In addition for some Unix like
dynamic loading shared libraries may be required during
linkage (to check symbols exist). On Windows the static
link thunks (*.LIB files) are required.

A version of flx command line harness is useful
on this platform to help orchestrate the C++ compilation
and linking stages. If the binary version is not available
either the bash script flx.sh , Windows FLX.BAT script, or the 
Python script flx.py may be useful.

The run platform requires only any shared libraries 
required to run the generated code. On Unix systems
this usually includes the C library even if the program
is statically linked. On Windows these are the runtime
*.DLL files.

Felix autoconfigures and builds on the assumption
that the build, host, target and run platforms
are all the same. In particular it translates test
and tutorial Felix code to C++, compiles it, and runs it
during the build process.

We are trying to set up the system so that any four
stage building environment can be supported however
this is difficult to test. The client may need to 
write their own scripts to handle a complicated
multi-stage environment, particularly if the file
systems are isolated.

